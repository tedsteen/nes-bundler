name: Build

on:
  push:

defaults:
  run:
    shell: bash # necessary for windows

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # NOTE: Should use the oldest available Ubuntu release, for maximum compatibility
        os: [windows-latest, macOS-12, ubuntu-20.04]
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install latest rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install dependencies
      run: |
        if [[ $RUNNER_OS == "Windows" ]]; then
          echo "${WIX}bin" >> $GITHUB_PATH
        elif [[ $RUNNER_OS == "macOS" ]]; then
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin

        elif [[ $RUNNER_OS == "Linux" ]]; then
          sudo apt-get update
          sudo apt-get -y install libatk1.0-dev libgtk-3-dev libsdl2-dev
        fi
    
    - name: Build
      run: |        
        if [[ $RUNNER_OS == "Windows" ]]; then
          cargo build --locked --release --features "netplay"
          candle config/windows/wix/main.wxs -o target/release/
          light target/release/*.wixobj -o target/release/nes-bundler-netplay.msi -ext WixUIExtension

          cp target/release/nes-bundler.exe target/release/nes-bundler-netplay.exe
          
          cargo build --locked --release
          candle config/windows/wix/main.wxs -o target/release/
          light target/release/*.wixobj -o target/release/nes-bundler.msi -ext WixUIExtension

        elif [[ $RUNNER_OS == "macOS" ]]; then
          mkdir -p target/release/
          # x86
          cargo build --locked --release --target=x86_64-apple-darwin --features "netplay"
          # arch 
          cargo build --locked --release --target=aarch64-apple-darwin --features "netplay"
          
          lipo target/x86_64-apple-darwin/release/nes-bundler \
            target/aarch64-apple-darwin/release/nes-bundler \
            -create -output target/release/nes-bundler-netplay
          
          # x86
          cargo build --locked --release --target=x86_64-apple-darwin
          # arch 
          cargo build --locked --release --target=aarch64-apple-darwin
          lipo target/x86_64-apple-darwin/release/nes-bundler \
            target/aarch64-apple-darwin/release/nes-bundler \
            -create -output target/release/nes-bundler
          
        elif [[ $RUNNER_OS == "Linux" ]]; then
          cargo build --locked --release --features "netplay"
          mv target/release/nes-bundler target/release/nes-bundler-netplay
          cargo build --locked --release
        fi

    - name: Prepare Artifacts
      run: |
        rm -rf artifacts || true
        mkdir artifacts
        ARTIFACTS=`readlink -f artifacts`
        BUNDLE_CONFIG=`readlink -f config`
        cd target/release
        
        if [[ $RUNNER_OS == "Windows" ]]; then
          cp nes-bundler*.exe $ARTIFACTS
          cp nes-bundler*.msi $ARTIFACTS

        elif [[ $RUNNER_OS == "macOS" ]]; then
          APP_BUNDLE=`readlink -f ../bundle/osx/nes-bundler.app`
          mkdir -p $APP_BUNDLE/Contents/MacOS || true
          mkdir -p $APP_BUNDLE/Contents/Resources || true
          iconutil $BUNDLE_CONFIG/macos/bundle.iconset -c icns --output $APP_BUNDLE/Contents/Resources/bundle.icns
          
          ARTIFACT1="$ARTIFACTS/nes-bundler-netplay.app"
          rsync -a $APP_BUNDLE/ $ARTIFACT1
          mv nes-bundler-netplay $ARTIFACT1/Contents/MacOS/nes-bundler
          
          ARTIFACT2="$ARTIFACTS/nes-bundler.app"
          rsync -a $APP_BUNDLE/ $ARTIFACT2
          mv nes-bundler $ARTIFACT2/Contents/MacOS/nes-bundler

        elif [[ $RUNNER_OS == "Linux" ]]; then
          # archive artifact
          strip nes-bundler
          tar czvf $ARTIFACTS/nes-bundler-linux-x86_64.tar.gz nes-bundler
          strip nes-bundler-netplay
          tar czvf $ARTIFACTS/nes-bundler-netplay-linux-x86_64.tar.gz nes-bundler-netplay

          # create appimage
          curl -Lo linuxdeploy https://github.com/linuxdeploy/linuxdeploy/releases/latest/download/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy
          curl -Lo linuxdeploy-plugin-appimage https://github.com/linuxdeploy/linuxdeploy-plugin-appimage/releases/latest/download/linuxdeploy-plugin-appimage-x86_64.AppImage
          chmod +x linuxdeploy-plugin-appimage 

          export LDAI_OUTPUT=nes-bundler.AppImage
          export LDAI_UPDATE_INFORMATION="gh-releases-zsync|nes-bundler|nes-bundler|latest|nes-bundler.AppImage.zsync"
          ./linuxdeploy \
            --executable=nes-bundler \
            --desktop-file=$BUNDLE_CONFIG/linux/bundle.desktop \
            --appdir=AppDir \
            --icon-file=$BUNDLE_CONFIG/linux/icon_256x256.png \
            --output=appimage
          mv nes-bundler.AppImage $ARTIFACTS/nes-bundler.AppImage
          mv nes-bundler.AppImage.zsync $ARTIFACTS/nes-bundler.AppImage.zsync
          
          mv nes-bundler-netplay nes-bundler
          ./linuxdeploy \
            --executable=nes-bundler \
            --desktop-file=$BUNDLE_CONFIG/linux/bundle.desktop \
            --appdir=AppDir \
            --icon-file=$BUNDLE_CONFIG/linux/icon_256x256.png \
            --output=appimage

          mv nes-bundler.AppImage $ARTIFACTS/nes-bundler-netplay.AppImage
          mv nes-bundler.AppImage.zsync $ARTIFACTS/nes-bundler-netplay.AppImage.zsync
        fi
        echo "RUNNER_OS=$RUNNER_OS" >> $GITHUB_ENV
    
    - name: Sign artifacts
      if: startsWith(github.event.ref, 'refs/tags/v')
      env:
        BUNDLE_APPLE_TEAM_ID: ${{ secrets.BUNDLE_APPLE_TEAM_ID }}
        BUNDLE_APPLE_USER: ${{ secrets.BUNDLE_APPLE_USER }}
        BUNDLE_APPLE_APP_PASSWORD: ${{ secrets.BUNDLE_APPLE_APP_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        CODE_SIGN_IDENTITY: ${{ secrets.CODE_SIGN_IDENTITY }}
      run: |
        ARTIFACTS=`readlink -f artifacts`

        if [[ $RUNNER_OS == "Windows" ]]; then
          echo "TODO"
        elif [[ $RUNNER_OS == "macOS" ]]; then
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.provisionprofile
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          KEYCHAIN_PASSWORD=`openssl rand -hex 12`
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security default-keychain -s $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          
          ARTIFACT1="$ARTIFACTS/nes-bundler-netplay.app"
          codesign --force --options=runtime --deep -s $CODE_SIGN_IDENTITY $ARTIFACT1
          ditto -c -k --keepParent $ARTIFACT1 to-submit.zip
          xcrun notarytool submit \
            --team-id $BUNDLE_APPLE_TEAM_ID \
            --apple-id $BUNDLE_APPLE_USER \
            --password $BUNDLE_APPLE_APP_PASSWORD \
            --wait to-submit.zip
          xcrun stapler staple $ARTIFACT1

          ARTIFACT2="$ARTIFACTS/nes-bundler.app"
          codesign --force --options=runtime --deep -s $CODE_SIGN_IDENTITY $ARTIFACT2
          ditto -c -k --keepParent $ARTIFACT2 to-submit.zip
          xcrun notarytool submit \
            --team-id $BUNDLE_APPLE_TEAM_ID \
            --apple-id $BUNDLE_APPLE_USER \
            --password $BUNDLE_APPLE_APP_PASSWORD \
            --wait to-submit.zip
          xcrun stapler staple $ARTIFACT2

        elif [[ $RUNNER_OS == "Linux" ]]; then
          echo "TODO"
        fi

    - name: Tar artifacts
      run: tar -C artifacts/ -cvf nes-bundler-${{ github.ref_name }}-$RUNNER_OS.tar .
    - uses: actions/upload-artifact@v4
      with:
        name: nes-bundler-${{ env.RUNNER_OS }}
        path: nes-bundler*.tar
    
  release:
    name: Release
    needs: build
    if: startsWith(github.event.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download bundles
        uses: actions/download-artifact@v4
        with:
          pattern: nes-bundler*

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            **
          
