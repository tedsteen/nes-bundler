name: Build

on:
  push:

defaults:
  run:
    shell: bash # necessary for windows

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # NOTE: Should use the oldest available Ubuntu release, for maximum compatibility
        os: [windows-latest, macOS-12, ubuntu-20.04]
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install latest rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install dependencies
      run: |
        if [[ $RUNNER_OS == "Windows" ]]; then
          if ! which cargo-wix; then cargo install cargo-wix; fi

        elif [[ $RUNNER_OS == "macOS" ]]; then
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
          if ! which cargo-bundle; then cargo install cargo-bundle; fi

        elif [[ $RUNNER_OS == "Linux" ]]; then
          sudo apt-get update
          sudo apt-get -y install libatk1.0-dev libgtk-3-dev libsdl2-dev
        fi
    
    - name: Build
      run: |
        if [[ $RUNNER_OS == "Windows" ]]; then
          cargo wix --output target/release/nes-bundler.msi --package nes-bundler

        elif [[ $RUNNER_OS == "macOS" ]]; then
          #TODO: wat. -> echo "MACOSX_DEPLOYMENT_TARGET=10.11" >> $GITHUB_ENV
          # x86
          cargo build --locked --release --target=x86_64-apple-darwin
          cargo bundle --release --target=x86_64-apple-darwin
          # arch 
          cargo build --locked --release --target=aarch64-apple-darwin
          cargo bundle --release --target=aarch64-apple-darwin

        elif [[ $RUNNER_OS == "Linux" ]]; then
          cargo build --locked --release
        fi

    - name: Prepare Artifacts
      run: |
        cd target/release

        if [[ $RUNNER_OS == "Windows" ]]; then
          echo "ARTIFACT=target/release/nes-bundler.exe" >> $GITHUB_ENV
          echo "ARTIFACT2=target/release/nes-bundler.msi" >> $GITHUB_ENV

        elif [[ $RUNNER_OS == "macOS" ]]; then
          # merge builds
          mkdir -p bundle/osx
          rm -rf bundle/osx/nes-bundler.app || true
          cp -R ../x86_64-apple-darwin/release/bundle/osx/nes-bundler.app \
            bundle/osx/nes-bundler.app
          rm bundle/osx/nes-bundler.app/Contents/MacOS/nes-bundler
          lipo ../x86_64-apple-darwin/release/bundle/osx/nes-bundler.app/Contents/MacOS/nes-bundler \
            ../aarch64-apple-darwin/release/bundle/osx/nes-bundler.app/Contents/MacOS/nes-bundler \
            -create -output \
            bundle/osx/nes-bundler.app/Contents/MacOS/nes-bundler
          codesign --force --deep -s - bundle/osx/nes-bundler.app
          # create .dmg
          rm *.dmg
          hdiutil create nes-bundler-uncompressed.dmg -volname "nes-bundler" -srcfolder bundle/osx
          hdiutil convert nes-bundler-uncompressed.dmg -format UDZO -o nes-bundler.dmg

          echo "ARTIFACT=target/release/nes-bundler.dmg" >> $GITHUB_ENV

        elif [[ $RUNNER_OS == "Linux" ]]; then
          # archive artifact
          strip nes-bundler
          tar czvf nes-bundler-linux-x86_64.tar.gz nes-bundler
          # create appimage
          curl -Lo linuxdeploy https://github.com/linuxdeploy/linuxdeploy/releases/latest/download/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy
          curl -Lo linuxdeploy-plugin-appimage https://github.com/linuxdeploy/linuxdeploy-plugin-appimage/releases/latest/download/linuxdeploy-plugin-appimage-x86_64.AppImage
          chmod +x linuxdeploy-plugin-appimage 

          export LDAI_OUTPUT=nes-bundler.AppImage
          export LDAI_UPDATE_INFORMATION="gh-releases-zsync|nes-bundler|nes-bundler|latest|nes-bundler.AppImage.zsync"
          ./linuxdeploy \
            --executable=nes-bundler \
            --desktop-file=../../assets/nes-bundler.desktop \
            --appdir=AppDir \
            --icon-file=../../assets/nes-bundler.svg \
            --output=appimage

          echo "ARTIFACT=target/release/nes-bundler-linux-x86_64.tar.gz" >> $GITHUB_ENV
          echo "ARTIFACT2=target/release/nes-bundler.AppImage" >> $GITHUB_ENV
          echo "ARTIFACT3=target/release/nes-bundler.AppImage.zsync" >> $GITHUB_ENV
        fi
        echo "RUNNER_OS=$RUNNER_OS" >> $GITHUB_ENV
    - uses: actions/upload-artifact@v4
      with:
        name: nes-bundler (${{ env.RUNNER_OS }})
        path: |
          ${{ env.ARTIFACT }}
          ${{ env.ARTIFACT2 }}
          ${{ env.ARTIFACT3 }}

  release:
    name: Release
    needs: build
    if: startsWith(github.event.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download bundles
        uses: actions/download-artifact@v4
        with:
          pattern: bundle-*

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: "*"
          
